name: Submission Check

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check-submission:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Analyze Submission
        id: analyze
        run: |
          # Initialize variables
          TEMPLATE_MODIFIED=false
          TEMPLATE_FILES=""
          SUBMISSION_FILES=""
          ROUND1_FILES=""
          ROUND2_FILES=""
          ROUND3_FILES=""
          HAS_SUBMISSION=false
          
          # Get all changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          # Check for template modifications
          for template in "TEMPLATE-ROUND-1.md" "TEMPLATE-ROUND-2.md" "TEMPLATE-ROUND-3.md" "README.md"; do
            if echo "$CHANGED_FILES" | grep -q "^$template$"; then
              TEMPLATE_MODIFIED=true
              TEMPLATE_FILES="$TEMPLATE_FILES $template"
            fi
          done
          
          # Categorize submission files
          while IFS= read -r file; do
            if [[ "$file" =~ ^round1/.*\.md$ ]]; then
              ROUND1_FILES="$ROUND1_FILES $(basename $file)"
              HAS_SUBMISSION=true
            elif [[ "$file" =~ ^round2/.*\.md$ ]]; then
              ROUND2_FILES="$ROUND2_FILES $(basename $file)"
              HAS_SUBMISSION=true
            elif [[ "$file" =~ ^round3/.*\.md$ ]]; then
              ROUND3_FILES="$ROUND3_FILES $(basename $file)"
              HAS_SUBMISSION=true
            fi
          done <<< "$CHANGED_FILES"
          
          # Set outputs for next steps
          echo "template_modified=$TEMPLATE_MODIFIED" >> $GITHUB_OUTPUT
          echo "template_files=$TEMPLATE_FILES" >> $GITHUB_OUTPUT
          echo "round1_files=$ROUND1_FILES" >> $GITHUB_OUTPUT
          echo "round2_files=$ROUND2_FILES" >> $GITHUB_OUTPUT
          echo "round3_files=$ROUND3_FILES" >> $GITHUB_OUTPUT
          echo "has_submission=$HAS_SUBMISSION" >> $GITHUB_OUTPUT
          
          # Determine recommendation
          if [ "$TEMPLATE_MODIFIED" = "true" ]; then
            echo "recommendation=REJECT" >> $GITHUB_OUTPUT
            echo "status=failure" >> $GITHUB_OUTPUT
          elif [ "$HAS_SUBMISSION" = "false" ]; then
            echo "recommendation=NEEDS_WORK" >> $GITHUB_OUTPUT
            echo "status=failure" >> $GITHUB_OUTPUT
          else
            echo "recommendation=APPROVE" >> $GITHUB_OUTPUT
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: Create Check Summary
        uses: actions/github-script@v6
        with:
          script: |
            const template_modified = '${{ steps.analyze.outputs.template_modified }}' === 'true';
            const template_files = '${{ steps.analyze.outputs.template_files }}';
            const round1_files = '${{ steps.analyze.outputs.round1_files }}';
            const round2_files = '${{ steps.analyze.outputs.round2_files }}';
            const round3_files = '${{ steps.analyze.outputs.round3_files }}';
            const has_submission = '${{ steps.analyze.outputs.has_submission }}' === 'true';
            const recommendation = '${{ steps.analyze.outputs.recommendation }}';
            
            // Build status message
            let title, summary, text;
            
            if (recommendation === 'APPROVE') {
              title = '✅ Ready for Approval';
              summary = 'This submission looks good and is ready for review.';
            } else if (recommendation === 'REJECT') {
              title = '❌ Issues Found - Do Not Merge';
              summary = 'This submission has issues that must be fixed before merging.';
            } else {
              title = '⚠️ Incomplete Submission';
              summary = 'This submission is missing required files.';
            }
            
            // Build detailed report
            text = '## Submission Analysis\n\n';
            
            // Template check
            text += '### Template Integrity Check\n';
            if (template_modified) {
              text += `❌ **Modified protected templates:** ${template_files}\n\n`;
            } else {
              text += '✅ **No template modifications detected**\n\n';
            }
            
            // Submission files
            text += '### Submitted Files\n';
            if (round1_files.trim()) {
              text += `✅ **Round 1:** ${round1_files}\n`;
            } else {
              text += '⚫ **Round 1:** No files\n';
            }
            
            if (round2_files.trim()) {
              text += `✅ **Round 2:** ${round2_files}\n`;
            } else {
              text += '⚫ **Round 2:** No files\n';
            }
            
            if (round3_files.trim()) {
              text += `✅ **Round 3:** ${round3_files}\n`;
            } else {
              text += '⚫ **Round 3:** No files\n';
            }
            
            if (!has_submission) {
              text += '\n⚠️ **No valid submission files found in any round folder**\n';
            }
            
            // Recommendation
            text += '\n### Recommendation\n';
            if (recommendation === 'APPROVE') {
              text += '🎯 **Recommendation: APPROVE**\n';
              text += 'This submission meets all requirements and can be merged after instructor review.\n';
            } else if (recommendation === 'REJECT') {
              text += '🚫 **Recommendation: DO NOT MERGE**\n';
              text += 'The student must:\n';
              text += '1. Restore modified template files to original state\n';
              text += '2. Create their submission in the appropriate round folder\n';
              text += '3. Push corrected changes\n';
            } else {
              text += '📝 **Recommendation: NEEDS COMPLETION**\n';
              text += 'The student should add their submission file to the appropriate round folder.\n';
            }
            
            // Create the check run
            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Submission Validation',
              head_sha: context.payload.pull_request.head.sha,
              status: 'completed',
              conclusion: '${{ steps.analyze.outputs.status }}',
              output: {
                title: title,
                summary: summary,
                text: text
              }
            });

      - name: Post Comment (only for issues)
        if: steps.analyze.outputs.recommendation != 'APPROVE'
        uses: actions/github-script@v6
        with:
          script: |
            const template_modified = '${{ steps.analyze.outputs.template_modified }}' === 'true';
            const template_files = '${{ steps.analyze.outputs.template_files }}';
            const has_submission = '${{ steps.analyze.outputs.has_submission }}' === 'true';
            
            let comment = '## 📋 Automated Submission Review\n\n';
            
            if (template_modified) {
              comment += '### ❌ Template Files Modified\n';
              comment += `You modified the following protected files: ${template_files}\n\n`;
              comment += '**How to fix:**\n';
              comment += '```bash\n';
              comment += 'git checkout origin/main -- TEMPLATE-*.md README.md\n';
              comment += 'git add .\n';
              comment += 'git commit -m "Restore templates"\n';
              comment += 'git push\n';
              comment += '```\n\n';
            }
            
            if (!has_submission) {
              comment += '### 📝 Missing Submission File\n';
              comment += 'Please create your submission file in the appropriate round folder.\n\n';
              comment += '**Example:**\n';
              comment += '```bash\n';
              comment += 'cp TEMPLATE-ROUND-1.md round1/yourpennkey.md\n';
              comment += '# Edit the file with your content\n';
              comment += 'git add round1/yourpennkey.md\n';
              comment += 'git commit -m "Add my submission"\n';
              comment += 'git push\n';
              comment += '```\n';
            }
            
            comment += '\n---\n';
            comment += '*This is an automated check. Once you fix these issues, the checks will pass.*';
            
            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.data.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Automated Submission Review')
            );
            
            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Set Check Status
        run: |
          if [ "${{ steps.analyze.outputs.status }}" = "failure" ]; then
            echo "::error::Submission has issues that need to be fixed"
            exit 1
          fi
